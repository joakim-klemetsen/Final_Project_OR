---
title: "Final Project OR2"
format: html
---

```{r modify-input-data}
# There is an issue with the structure of the project data where the thousand 
# and the decimal seperators both are ".". To mittigate this, we utilized r.

# load packages
library(tidyverse)

# load data
raw <- read.delim("data/ProjectData_corr.csv", sep = ";")

# check if data is loaded correctly
sapply(raw, function(x) class(x))

# function fixing issues with thousand separator in data entry
number_fix <- function(variable) {
  result <- numeric(length(variable)) 
  for (i in seq_along(variable)) {
    split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
    if (ncol(split) > 2) {
      result[i] <- 1e3 * as.numeric(split[1]) + as.numeric(split[2]) + (1 / 1e3) * as.numeric(split[3])
    } else if (ncol(split) == 2) {
      result[i] <- as.numeric(split[1]) + (1 / 1e3) * as.numeric(split[2])
    } else {
      result[i] <- as.numeric(split[1])
    }
  }
  return(result)
}

# apply the number_fix to "Price" as it is the problematic variable
Price_fixed <- sapply(raw$Price, function(x) number_fix(x))

# validate output of function
class(Price_fixed)
summary(Price_fixed)

# update data with correct formatting
data <- raw %>% 
  mutate(Price = as.numeric(Price_fixed))

# write the modified data frame to a new CSV file
write.csv(data, "data/ModifiedProjectData.csv", row.names = FALSE)
```

```{julia load-packages-and-data}
# The modified data file is then loaded to Julia

# load required packages
using CSV, DataFrames, JuMP, HiGHS

# load data
data = CSV.read("data/ModifiedProjectData.csv", DataFrame)

```

# Task 1: Mathematical Formulation

The first task is to formulate the welfare maximization problem mathematically. We will systematically present the sets, parameters, decision variables and objective function of the problem, and lastly give an in depth explanation of the constraints of the model.

## Sets

To solve the welfare maximization problem, we define five sets from the data. *I*, *J*, *K*, and *L* will be the sets containing the set of unique BidID's, periods, locations and ParentBidID's respectively.

```{julia define-sets}
# define sets
bids = unique(data.BidID)
parent_bids = unique(data.ParentBidID)
locations = unique(data.Location)
location_combinations = [(l, k) for l in locations, k in locations if l != k]
periods = unique(data.Period)
```