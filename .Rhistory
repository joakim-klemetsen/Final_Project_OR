})
})
sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
}) %>% mean(.)
})
sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
})
})
sapply(1:10, function(j){
for (i in 1:nrow(xy)) {
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
}
})
sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
})
})
sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
})
}) %>% as.data.frame()
nrow(xy)
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
f(x0 = X.test,x = X.train,y=y.train, K = j)})
})
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
})
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
}) %>% which.min(.)
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
f(xy[1,1], xy[-1,1], xy[-1,2])
#| warning: false
xy <- data.frame(x = seq(1:10),
y = c(5.26,9.13,11.17,15.64,25.32,
25.55,41.39,48.17,58.65,68.24))
f(xy[1,1], xy[-1,1], xy[-1,2])
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
mean((f(xy[1,1], xy[-1,1], xy[-1,2])-1)^2)
mean((f(xy[6,1], xy[-6,1], xy[-6,2])-1)^2)
# loocv
loocv <- sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
which.min(loocv)
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
# loocv
loocv <- sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
})
loocv
# loocv
loocv <- sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
}) %>% colMeans()
loocv
# deremine k that minimized the mse
k <- which.min(loocv)
k
ggplot(aes(x,y), data = xy)
ggplot(aes(x,y), data = xy) +
geom_point()
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual"))
xy[["y"]], K = k)
sapply(1:10, function(i) f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(x, y), data = data.frame(x = 1:10,
y = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(x, y), data = data.frame(x = 1:10,
y = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(xl, yl), data = data.frame(xl = 1:10,
yl = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(xl, yl, col = "prediction"),
data = data.frame(xl = 1:10,
yl = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})))
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})
yl
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)}) %>%
as.numeric()
yl
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(y = yl))
ggplot(aes(x, y), data = data.frame(x = 1:10,
y = yl))
ggplot(aes(x, y), data = data.frame(x = 1:10,
y = yl)) + geom_point()
cbind(xy, yl)
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y))
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y)) +
geom_line(aes(y = yl))
cbind(xy, yl)
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y, col = "actual")) +
geom_line(aes(y = yl, col = "prediction"))
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
})
sapply(1:10, function(i)
sapply(1:10, function(j)
mean((f(xy[j,"x"], xy[-j,"x"], xy[-j,"y"], i)-1)^2)))
sapply(1:10, function(i)
sapply(1:10, function(j)
mean((f(xy[j,"x"], xy[-j,"x"], xy[-j,"y"], i)-1)^2))) %>%
colMeans()
loocv
sapply(1:10, function(i)
sapply(1:10, function(j)
mean((f(xy[j,"x"], xy[-j,"x"], xy[-j,"y"], i)-1)^2))) %>%
colMeans()
loocv <- function(k){
sapply(1:10, function(i) mean(((f(xy[i,"x"],xy[-i,"x"],xy[-i,"y"], k))-1)^2))
}
sapply(1:10, loocv)
sapply(1:5, loocv)
xy[10,]
sapply(1:5, loocv)
sapply(1:5, loocv) %>% colMeans()
sapply(1:5, loocv) %>% colMeans()
sapply(1:5, loocv) %>% colMeans() %>% plot()
# detrmine k that minimized the mse
k <- 3
# loocv
loocv <- function(k){
sapply(1:10, function(i) mean(((f(xy[i,"x"],xy[-i,"x"],xy[-i,"y"], k))-1)^2))
}
loocv.res <- sapply(1:5, loocv) %>% #considering k of 1:5
colMeans()
loocv.res%>%
plot()
# detrmine k that minimized the mse
k <- which.min(loocv.res)
k
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[-i,"x"], xy[-i["y"]], K = k)}) %>%
as.numeric()
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[-i,"x"], xy[-i,"y"], K = k)}) %>%
as.numeric()
yl
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y, col = "actual")) +
geom_line(aes(y = yl, col = "prediction"))
?class::knn
setwd("/Users/joakimklemetsen/Desktop/Final Project/Final_Project")
library(tidyverse)
data <- read.csv("ProjectData.csv", sep = ";", dec = ".")
data <- read.csv("data/ProjectData.csv", sep = ";", dec = ".")
test <- data$Price
str_split(data$Price, ".")
str_split(data$Price[1], ".")
data <- read.csv("data/ProjectData.csv", sep = ";")
View(data)
data$Price[1]
?str_split
str_split(data$Price[1], ".")
data$Price[1]
str_split(data$Price[1], "\\.")
data$Price[1:3]
data$Price[1:5]
View(data)
str_split(data$Price[1], "\\.") %>%
sapply(data$Price[1:3], \(x) {
str_split(x, "\\.")
})
str_split(data$Price[1], "\\.") %>%
lapply(data$Price[1:3], \(x) {
str_split(x, "\\.")
})
str_split(data$Price[1], "\\.") %>%
lapply(data$Price, \(x) {
str_split(x, "\\.")
})
data %>%
select(Price) %>%
sapply(\(x) {
str_split(x, "\\.")
})
data$Price
sapply(data$Price, function(e) {print(e)})
sapply(data$Price, \(x) {print(x)})
sapply(data[["Price"]], \(x) {print(x)})
sapply(data[["Price"]], \(x) {str_split(x, "\\.")})
str_split(data$Price[1], "\\.")
length(str_split(data$Price[1], "\\.")) %>%
sapply(data$Price, \(x) {
str_split(x, "\\.")
})
length(str_split(data$Price[1], "\\."))
str_split(data$Price[1], "\\.")
as.vector(str_split(data$Price[1], "\\."))
length(as.vector(str_split(data$Price[1], "\\.")))
data$Price
tibble(raw = data$Price)
tibble(raw = data$Price) %>%
sapply(raw, \(x){
str_split(x, "\\.")
})  ´
tibble(raw = data$Price)  ´
tibble(raw = data$Price) %>%
sapply(raw, \(x){
str_split(x, "\\.")
})
tibble(raw = data$Price) %>%
map(raw, \(x) {str_split(x, "\\.")})
sapply(data$Price, \(x) {
str_split(x, "\\.")
})
sapply(data$Price, \(x) {
str_split(x, "\\.")
}) %>% as.data.frame()
sapply(data$Price, \(x) {
str_split(x, "\\.")
})
View(data)
data$Price
data$Price %>%
map(., str_split(., "\\."))
as.numeric(gsub("\\.", "", data$Price))
as.numeric(str_split("\\.", data$Price))
data %>%
mutate(
Price_clean = gsub("\\.", "", Price),        # Remove all dots (thousand separators)
Price_clean = sub("(?<=\\d)(\\d{2})$", ".\\1", Price_clean, perl = TRUE),  # Replace last two digits with a decimal
Price_numeric = as.numeric(Price_clean)     # Convert to numeric
)
data %>%
mutate(
# Remove thousand separators (dots not followed by exactly 3 digits or at the end of the string)
Price_clean = gsub("\\.(?=\\d{3}(\\.|$))", "", Price, perl = TRUE),
# Replace the remaining dot (decimal point) with a proper decimal point (if needed)
Price_clean = gsub("\\.", ".", Price_clean),
# Convert to numeric
Price_numeric = as.numeric(Price_clean)
)
str_split(data$Price[1], "\\.")
as.data.frame(str_split(data$Price[1], "\\."))
as.numeric(str_split(data$Price[1], "\\."))
as.vector(str_split(data$Price[1], "\\."))
as.vector(str_split(data$Price[1], "\\."))[1]
as.vector(str_split(data$Price[1], "\\."))[[1]]
t <- str_split(data$Price[1], "\\.")
View(t)
t <- str_split(data$Price[1], "\\.", simplify = TRUE)
t <- as.vector(str_split(data$Price[1], "\\.", simplify = TRUE))
as.vector(str_split(data$Price[1], "\\.", simplify = TRUE))
as.vector(str_split(data$Price[1], "\\.", simplify = TRUE))[1]
length(data$Price)
data$Price[1]
t <- as_tibble(str_split(data$Price[1], "\\.", simplify = TRUE))
t <- (str_split(data$Price[1], "\\.", simplify = TRUE))
class(t)
t <- (str_split(data$Price[1], "\\.", simplify = TRUE)) %>% as.data.frame()
class(t)
ncol(t)
t[1]
t[1]
as.numeric(t[1])
t %>%
mutate(if(ncol(t > 2)){result = 1000*as.numeric(t[3]) + as.numeric(t[2]) + (1/1000)*as.numeric(t[1])}
else{result = as.numeric(t[2]) + (1/1000)*as.numeric(t[1])})
as.numeric(t[2]) + (1/1000)*as.numeric(t[1])
as.numeric(t[1]) + (1/1000)*as.numeric(t[2])
t <- (str_split(data$Price[1], "\\.", simplify = TRUE)) %>% as.data.frame()
as.numeric(t[1]) + (1/1000)*as.numeric(t[2])
number_fix <- function(variable){
for i in 1:length(variable){
number_fix <- function(variable){
for i in 1:ncol(variable){
number_fix <- function(variable){
for (i in 1:ncol(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result = 1000*as.numeric(split[1]) + as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
}
}
}
number_fix(data$Price[1])
number_fix <- function(variable){
for (i in 1:length(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result = 1000*as.numeric(split[1]) + as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
}
}
}
number_fix(data$Price[1])
number_fix <- function(variable){
for (i in 1:length(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result = 1000*as.numeric(split[1]) + as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
}
}
return(result)
}
number_fix(data$Price[1])
number_fix <- function(variable){
for (i in 1:length(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result <- 1000*as.numeric(split[1]) + as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
}
}
return(result)
}
number_fix(data$Price[1])
number_fix <- function(variable){
for (i in 1:length(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result <- 1000*as.numeric(split[1]) + as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
} else{
result <- as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
}
}
return(result)
}
number_fix(data$Price[1])
number_fix <- function(variable){
for (i in 1:length(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result <- 1000*as.numeric(split[1]) + as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
} else{
result <- as.numeric(split[1]) + (1/1000)*as.numeric(split[2])
}
}
return(result)
}
number_fix(data$Price[1])
number_fix(data$Price[2])
number_fix(data$Price[442])
(str_split(data$Price[442], "\\.", simplify = TRUE)) %>% as.data.frame()
number_fix <- function(variable){
for (i in 1:length(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result <- 1e6*as.numeric(split[1]) + as.numeric(split[2]) + (1/1000)*as.numeric(split[3])
} else{
result <- as.numeric(split[1]) + (1/1000)*as.numeric(split[2])
}
}
return(result)
}
number_fix(data$Price[442])
number_fix <- function(variable){
for (i in 1:length(variable)){
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if(ncol(split) > 2){
result <- 1e3*as.numeric(split[1]) + as.numeric(split[2]) + (1/1e3)*as.numeric(split[3])
} else{
result <- as.numeric(split[1]) + (1/1000)*as.numeric(split[2])
}
}
return(result)
}
number_fix(data$Price[442])
for (i in data$Price) {
number_fix(i)
}
length(data)
nrow(data)
for (i in 1:nrow(data)) {
number_fix(data$Price[i])
}
sapply(data$Price, \(x) number_fix(x))
length(data$Price)
# Function fixing issues with thousand separator in data entry
number_fix <- function(variable) {
result <- numeric(length(variable))  # Pre-allocate vector
for (i in seq_along(variable)) {
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if (ncol(split) > 2) {
result[i] <- 1e3 * as.numeric(split[1]) + as.numeric(split[2]) + (1 / 1e3) * as.numeric(split[3])
} else if (ncol(split) == 2) {
result[i] <- as.numeric(split[1]) + (1 / 1e3) * as.numeric(split[2])
} else {
result[i] <- as.numeric(split[1])  # Default case
}
}
return(result)
}
# Apply the function
data$Price_fixed <- sapply(data$Price, function(x) number_fix(x))
View(data)
# write the modified data frame to a new CSV file
write.csv(data, "data/ModifiedProjectData.csv", row.names = FALSE)
# load required packages
library(tidyverse)
# load data
data <- read.csv("data/ProjectData.csv", sep = ";", stringsAsFactors = FALSE)
# function fixing issues with thousand separator in data entry
number_fix <- function(variable) {
result <- numeric(length(variable))
for (i in seq_along(variable)) {
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if (ncol(split) > 2) {
result[i] <- 1e3 * as.numeric(split[1]) + as.numeric(split[2]) + (1 / 1e3) * as.numeric(split[3])
} else if (ncol(split) == 2) {
result[i] <- as.numeric(split[1]) + (1 / 1e3) * as.numeric(split[2])
} else {
result[i] <- as.numeric(split[1])
}
}
return(result)
}
# apply the function
data$Price <- sapply(data$Price, function(x) number_fix(x))
# write the modified data frame to a new CSV file
write.csv(data, "data/ModifiedProjectData.csv", row.names = FALSE)
