sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
}) %>% mean(.)
})
sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
})
})
sapply(1:10, function(j){
for (i in 1:nrow(xy)) {
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
}
})
sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
})
})
sapply(1:nrow(xy), function(i){
sapply(1:10, function(j){
as.numeric(f(x0 = xy[i,"x"], x = xy[-i,"x"],
y = xy[-i,"y"]), K = j)
})
}) %>% as.data.frame()
nrow(xy)
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
f(x0 = X.test,x = X.train,y=y.train, K = j)})
})
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
})
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
}) %>% which.min(.)
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
f(xy[1,1], xy[-1,1], xy[-1,2])
#| warning: false
xy <- data.frame(x = seq(1:10),
y = c(5.26,9.13,11.17,15.64,25.32,
25.55,41.39,48.17,58.65,68.24))
f(xy[1,1], xy[-1,1], xy[-1,2])
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
mean((f(xy[1,1], xy[-1,1], xy[-1,2])-1)^2)
mean((f(xy[6,1], xy[-6,1], xy[-6,2])-1)^2)
# loocv
loocv <- sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
which.min(loocv)
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
}) %>% mean(.)
})
# loocv
loocv <- sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
})
loocv
# loocv
loocv <- sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
}) %>% colMeans()
loocv
# deremine k that minimized the mse
k <- which.min(loocv)
k
ggplot(aes(x,y), data = xy)
ggplot(aes(x,y), data = xy) +
geom_point()
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual"))
xy[["y"]], K = k)
sapply(1:10, function(i) f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(x, y), data = data.frame(x = 1:10,
y = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(x, y), data = data.frame(x = 1:10,
y = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(xl, yl), data = data.frame(xl = 1:10,
yl = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})))
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(xl, yl, col = "prediction"),
data = data.frame(xl = 1:10,
yl = sapply(1:10, function(i) {
f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})))
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)})
yl
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[["x"]], xy[["y"]], K = k)}) %>%
as.numeric()
yl
ggplot(aes(x,y), data = xy) +
geom_line(aes(col = "actual")) +
geom_line(aes(y = yl))
ggplot(aes(x, y), data = data.frame(x = 1:10,
y = yl))
ggplot(aes(x, y), data = data.frame(x = 1:10,
y = yl)) + geom_point()
cbind(xy, yl)
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y))
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y)) +
geom_line(aes(y = yl))
cbind(xy, yl)
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y, col = "actual")) +
geom_line(aes(y = yl, col = "prediction"))
sapply(1:nrow(xy), function(i){
X.train <- xy[-i,"x"]
X.test <- xy[i,"x"]
y.train <- xy[-i,"y"]
sapply(1:10, function(j){
pred <- f(x0 = X.test,x = X.train,y=y.train, K = j)
mean((pred-1)^2)
})
})
sapply(1:10, function(i)
sapply(1:10, function(j)
mean((f(xy[j,"x"], xy[-j,"x"], xy[-j,"y"], i)-1)^2)))
sapply(1:10, function(i)
sapply(1:10, function(j)
mean((f(xy[j,"x"], xy[-j,"x"], xy[-j,"y"], i)-1)^2))) %>%
colMeans()
loocv
sapply(1:10, function(i)
sapply(1:10, function(j)
mean((f(xy[j,"x"], xy[-j,"x"], xy[-j,"y"], i)-1)^2))) %>%
colMeans()
loocv <- function(k){
sapply(1:10, function(i) mean(((f(xy[i,"x"],xy[-i,"x"],xy[-i,"y"], k))-1)^2))
}
sapply(1:10, loocv)
sapply(1:5, loocv)
xy[10,]
sapply(1:5, loocv)
sapply(1:5, loocv) %>% colMeans()
sapply(1:5, loocv) %>% colMeans()
sapply(1:5, loocv) %>% colMeans() %>% plot()
# detrmine k that minimized the mse
k <- 3
# loocv
loocv <- function(k){
sapply(1:10, function(i) mean(((f(xy[i,"x"],xy[-i,"x"],xy[-i,"y"], k))-1)^2))
}
loocv.res <- sapply(1:5, loocv) %>% #considering k of 1:5
colMeans()
loocv.res%>%
plot()
# detrmine k that minimized the mse
k <- which.min(loocv.res)
k
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[-i,"x"], xy[-i["y"]], K = k)}) %>%
as.numeric()
yl <- sapply(1:10, function(i) {f(xy[i,"x"], xy[-i,"x"], xy[-i,"y"], K = k)}) %>%
as.numeric()
yl
cbind(xy, yl) %>%
ggplot(aes(x)) +
geom_line(aes(y = y, col = "actual")) +
geom_line(aes(y = yl, col = "prediction"))
?class::knn
library(distributional)
library(stats)
X <- rexp(1000, rate = 2)
hist(X)
distributional::dist_inverse_exponential(2)
setwd("~/Desktop/Final Project/Final_Project")
# load data
raw <- read.csv("data/ProjectData_corr.csv")
View(raw)
# load data
raw <- read.delim("data/ProjectData_corr.csv", sep = ";")
# function fixing issues with thousand separator in data entry
number_fix <- function(variable) {
result <- numeric(length(variable))
for (i in seq_along(variable)) {
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if (ncol(split) > 2) {
result[i] <- 1e3 * as.numeric(split[1]) + as.numeric(split[2]) + (1 / 1e3) * as.numeric(split[3])
} else if (ncol(split) == 2) {
result[i] <- as.numeric(split[1]) + (1 / 1e3) * as.numeric(split[2])
} else {
result[i] <- as.numeric(split[1])
}
}
return(result)
}
# check if data is loaded correctly
sapply(raw, class(.))
# check if data is loaded correctly
sapply(raw, class(x))
# check if data is loaded correctly
sapply(raw, function(x) class(x))
# apply the number_fix to "Price" as it is the problematic variable
Price <- sapply(raw$Price, function(x) number_fix(x))
# load packages
library(tidyverse)
# apply the number_fix to "Price" as it is the problematic variable
Price <- sapply(raw$Price, function(x) number_fix(x))
# validate output of function
class(Price)
summary(Price)
# update data with correct formating
data <- raw %>%
mutate(Price = as.numeric(Price))
# update data with correct formating
data <- copy(raw)
# update data with correct formating
data <- paste(raw)
# apply the number_fix to "Price" as it is the problematic variable
Price_fixed <- sapply(raw$Price, function(x) number_fix(x))
# update data with correct formating
data <- raw %>%
replace(Price, Price_fixed)
# update data with correct formating
data <- raw %>%
mutate(Price = as.numeric(Price_fixed))
View(data)
sapply(data, function(x) summary(x))
# load packages
library(tidyverse)
# load data
raw <- read.delim("data/ProjectData.csv", sep = ";")
# check if data is loaded correctly
sapply(raw, function(x) class(x))
# function fixing issues with thousand separator in data entry
number_fix <- function(variable) {
result <- numeric(length(variable))
for (i in seq_along(variable)) {
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if (ncol(split) > 2) {
result[i] <- 1e3 * as.numeric(split[1]) + as.numeric(split[2]) + (1 / 1e3) * as.numeric(split[3])
} else if (ncol(split) == 2) {
result[i] <- as.numeric(split[1]) + (1 / 1e3) * as.numeric(split[2])
} else {
result[i] <- as.numeric(split[1])
}
}
return(result)
}
# apply the number_fix to "Price" as it is the problematic variable
Price_fixed <- sapply(raw$Price, function(x) number_fix(x))
# validate output of function
class(Price)
summary(Price)
# update data with correct formatting
data <- raw %>%
mutate(Price = as.numeric(Price_fixed))
sapply(data, function(x) summary(x))
# load packages
library(tidyverse)
# load data
raw <- read.delim("data/ProjectData_corr.csv", sep = ";")
# check if data is loaded correctly
sapply(raw, function(x) class(x))
# function fixing issues with thousand separator in data entry
number_fix <- function(variable) {
result <- numeric(length(variable))
for (i in seq_along(variable)) {
split <- str_split(variable[i], "\\.", simplify = TRUE) %>% as.data.frame()
if (ncol(split) > 2) {
result[i] <- 1e3 * as.numeric(split[1]) + as.numeric(split[2]) + (1 / 1e3) * as.numeric(split[3])
} else if (ncol(split) == 2) {
result[i] <- as.numeric(split[1]) + (1 / 1e3) * as.numeric(split[2])
} else {
result[i] <- as.numeric(split[1])
}
}
return(result)
}
# apply the number_fix to "Price" as it is the problematic variable
Price_fixed <- sapply(raw$Price, function(x) number_fix(x))
# validate output of function
class(Price)
summary(Price)
# update data with correct formatting
data <- raw %>%
mutate(Price = as.numeric(Price_fixed))
sapply(data, function(x) summary(x))
sapply(data, function(x) class(x))
sapply(data, function(x) if(is.numeric(x)){summary(x)})
sapply(data, function(x) if(is.integer(x)){summary(x)})
sapply(data, function(x){
class(x)
})
sapply(data, function(x) class(x))
t <- sapply(data, function(x) class(x))
t
sapply(data, function(x) class(x))
is.numeric(sapply(data, function(x) class(x)))
sapply(data, function(x) class(x))
sapply(data, function(x) class(x)) %>%
names(.)
names(data)[sapply(data, function(x) class(x))]
names(data)[sapply(data, function(x) is.integer(class(x)))]
names(data)[sapply(data, function(x) class(x) == "integer")]
int <- names(data)[sapply(data, function(x) class(x) == "integer")]
num <- names(data)[!names(data) %in% int]
num
int
data[names(data) %in% num]
sapply(data[names(data) %in% num], summary(x))
sapply(data[names(data) %in% num], function(x) summary(x))
data %>%
select(int)
data %>%
select(int) %>%
summarise(across(everything(), n()))
data %>%
select(int) %>%
summarise(across(everything(), ~n(.)))
data %>%
select(all_of(int)) %>%
summarise(across(everything(), ~ sum(!is.na(.))))
data %>%
select(all_of(int)) %>%
summarise(across(everything(), ~unique(.)))
data %>%
select(all_of(int)) %>%
summarise(across(everything(), ~n_distinct(.)))
lapply(c("<= 0", "> 0"), function(condition) {
# Filter the data based on the condition for Price
filtered_data <- data %>%
filter(eval(parse(text = paste("Price", condition))))
# Compute summary statistics for numerical columns
summarised_stats <- filtered_data %>%
select(all_of(num)) %>%
summarise(across(everything(), summary))
return(summarised_stats)
})
sapply(c("<= 0", "> 0"), function(c){
data %>%
select(all_of(num)) %>%
filter(eval(parse(paste("Price", c)))) %>%
summarise(across(everything(), summary))
})
sapply(c("<= 0", "> 0"), function(c){
data %>%
select(all_of(num)) %>%
filter(eval(parse(text = paste("Price", c)))) %>%
summarise(across(everything(), summary))
})
sapply(c("<= 0", "> 0"), function(c){
data %>%
select(all_of(num)) %>%
filter(eval(parse(text = paste("Price", c)))) %>%
summarise(across(everything(), summary))
}) %>% unest
sapply(c("<= 0", "> 0"), function(c){
data %>%
select(all_of(num)) %>%
filter(eval(parse(text = paste("Price", c)))) %>%
summarise(across(everything(), summary))
}) %>% as.numeric()
t <- sapply(c("<= 0", "> 0"), function(c){
data %>%
select(all_of(num)) %>%
filter(eval(parse(text = paste("Price", c)))) %>%
summarise(across(everything(), summary))
})
View(t)
sapply(data[names(data) %in% num], function(x) summary(x))
data %>%
filter(Price <= 0)
data %>%
filter(Quantity <= 0)
data %>%
select(all_of(num)) %>%
filter(Quantity <= 0)
data %>%
select(all_of(num)) %>%
filter(Quantity <= 0) %>%
summarise(across(everything(), summary))
data %>%
select(all_of(num)) %>%
filter(Quantity <= 0) %>%
sapply(., summary(.))
data %>%
filter(Quantity <= 0) %>%
select(all_of(num)) %>%
summarise(across(everything(), ~ summary(.)))
data %>%
filter(Quantity <= 0) %>%
select(all_of(num))
data %>%
filter(Quantity <= 0) %>%
select(all_of(num)) %>%
sapply(num, function(x) summary(x))
num
data %>%
filter(Quantity <= 0) %>%
select(all_of(num)) %>%
sapply(., print(.))
sapply(data[names(data) %in% num] %>% filter(Quantity < 0)
, function(x) summary(x))
# give summary statistics on the numerical variables
sapply(c("<=", ">"), function(condition){
sapply(data[names(data) %in% num] %>%
filter(if (condition == "<=") Quantity <= 0 else Quantity < 0),
function(x) summary(x))
})
# give summary statistics on the numerical variables
lapply(c("<=", ">"), function(condition){
sapply(data[names(data) %in% num] %>%
filter(if (condition == "<=") Quantity <= 0 else Quantity < 0),
function(x) summary(x))
})
# give summary statistics on the numerical variables
lapply(c("<=", ">"), function(condition){
sapply(data[names(data) %in% num] %>%
filter(if (condition == "<=") Quantity <= 0 else Quantity > 0),
function(x) summary(x))
})
# divide variables in indicators and numerical variables
int <- names(data)[sapply(data, function(x) class(x) == "integer")]
num <- names(data)[!names(data) %in% int]
# give summary statistics on the numerical variables
lapply(c("<=", ">"), function(condition){
sapply(data[names(data) %in% num] %>%
filter(if (condition == "<=") Quantity <= 0 else Quantity > 0),
function(x) summary(x))
})
# provide insight on the levels of the indicator variables
data %>%
select(all_of(int)) %>%
summarise(across(everything(), ~n_distinct(.)))
# write the modified data frame to a new CSV file
write.csv(data, "data/ModifiedProjectData.csv", row.names = FALSE)
# write the modified data frame to a new CSV file
write.csv(data, "data/ModifiedProjectData.csv", row.names = FALSE)
